[build-system]
# Minimum requirements for the build system to execute.
# PEP 508 specifications for PEP 518.
requires = [
    "setuptools >= 61.0.0",
    "setuptools_scm[toml]>=6.2",
    "wheel",
]
build-backend="setuptools.build_meta"

[project]
name = "SQLAlchemy-JSONField"
description = "SQLALchemy JSONField implementation for storing dicts at SQL"
requires-python = ">=3.7.0"
keywords = ["sql", "sqlalchemy", "json", "jsonfield", "development"]
license={text="Apache-2.0"}  # Use SPDX classifier
readme = {file = "README.rst", content-type = "text/x-rst"}
authors=[{name="Alexey Stepanov", email="penguinolog@gmail.com"}]
dynamic = ["version", "classifiers", "dependencies"]

[project.urls]
"Repository" = "https://github.com/penguinolog/sqlalchemy_jsonfield"
"Bug Tracker" = "https://github.com/penguinolog/sqlalchemy_jsonfield/issues"

[tool.setuptools.package-data]
sqlalchemy_jsonfield=[
  "py.typed",
  "*.pyi",
  "*/*.pyi"
]

[tool.setuptools.packages.find]
exclude = [
  "doc*",
  "examples",
  "test*",
  "bin",
  ".*"
]
namespaces = false

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}
classifiers = {file = ["classifiers.txt"]}

[tool.distutils.bdist_wheel]
universal = 0

[tool.setuptools_scm]
write_to = "sqlalchemy_jsonfield/_version.py"

[tool.black]
line-length = 120
safe = true
target-version = ["py37", "py38"]

[tool.isort]
line_length = 120
multi_line_output = 3
force_single_line = true

[tool.doc8]
max-line-length = 150

[tool.pydocstyle]
ignore = [
  "D401",
  "D202",
  "D203",
  "D213"
]
# First line should be in imperative mood; try rephrasing
# No blank lines allowed after function docstring
# 1 blank line required before class docstring
# Multi-line docstring summary should start at the second line
match = "(?!_version|test_)*.py"

[tool.mypy]
strict = true
warn_unused_configs = true
warn_redundant_casts = true
show_error_context = true
show_column_numbers = true
show_error_codes = true
pretty = true

[[tool.mypy.overrides]]
module = [
  "sqlalchemy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-vvv -s -p no:django -p no:ipdb"
testpaths = ["test"]
mock_use_standalone_module = false
junit_family = "xunit2"

[tool.coverage.run]
omit = ["test/*"]
branch = true

[tool.coverage.report]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",

  # Don't complain about missing debug-only code:
  "def __repr__",

  # Don't complain if tests don't hit defensive assertion code:
  "raise NotImplementedError",

  # Exclude methods marked as abstract
  "@abstractmethod",

  # Exclude import statements
  "^from\b",
  "^import\b",

  # Exclude variable declarations that are executed when file is loaded
  "^[a-zA-Z_]+\b\\s=",

  # Code for static analysis is never covered:
  "if typing.TYPE_CHECKING:",

  # Fallback code with no installed deps is almost impossible to cover properly
  "except ImportError:",

  # Don't complain if non-runnable code isn't run:
  "if __name__ == .__main__.:",

  # OS Specific
  "if platform.system()",
]

[tool.coverage.json]
pretty_print = true

[tool.ruff]
line-length = 120
show-source = true
target-version = "py38"

extend-select = [
  "E",
  "W",  # also pycodestyle warnings
  "PYI",  # flake8-pyi
  "ASYNC",  # flake8-async
  "FA",  # from __future__ import annotations
  "DTZ",  # flake8-datetimez
  "SLOT",  # flake8-slots
  "TCH",  # flake8-type-checking
  "PTH",  # flake8-use-pathlib
  "S",  # flake8-bandit
  "A",  # flake8-builtins
  "B", "T10", "EXE",  # flake8-bugbear, flake8-debugger, flake8-executable
  "ISC",  # flake8-implicit-str-concat
  "RET", "SIM", "C4",  # flake8-return, flake8-simplify, flake8-comprehensions
  "ICN", "PGH",  # flake8-import-conventions, pygrep-hooks
  "Q",  # quotes
  "FLY",  # Flynt
  "FURB",  # Refurb
  "TRY", "UP", "I", "PL", "PERF", "RUF",  # tryceratops, pyupgrade, isort, pylint + perflint, Ruff-specific
]
extend-ignore = [
  # refactor rules (too many statements/arguments/branches)
  "PLR0904", "PLR0911", "PLR0912", "PLR0913", "PLR0915", "PLR2004",
  "PLR6301",  # "maybe staticmethod"
  "PLW3201",  # Bad or misspelled dunder method name `__pretty_repr__`
  "RET504",  # Unnecessary variable assignment before return statement
  "SIM108",  # Use ternary operator,
  "TRY003",  # long messages prepare outside, ...
]

[tool.ruff.per-file-ignores]
"test_*.py" = ["SIM117", "PTH107", "PTH110", "PTH118"]

[tool.ruff.isort]
force-single-line = true
known-third-party = ["logwrap", "paramiko", "tenacity", "pyyaml", "ruamel.yaml", "psutil"]

[tool.ruff.pydocstyle]
convention = "pep257"

[tool.refurb]
python_version = "3.8"
enable_all = true
ignore = ["FURB120"]

[tool.pylint]
extension-pkg-whitelist = ["lxml.etree"]
ignore = ["CVS", "_version.py"]
jobs = 0
py-version = "3.8"

load-plugins = [
  "pylint.extensions.docparams",
  "pylint.extensions.docstyle",
  "pylint.extensions.overlapping_exceptions",
  "pylint.extensions.check_elif",
  "pylint.extensions.for_any_all",
  "pylint.extensions.code_style",
  "pylint.extensions.redefined_variable_type",
  "pylint.extensions.typing",
  "pylint.extensions.empty_comment",
  "pylint.extensions.dunder",
]

enable = "all"
disable = [
  "locally-disabled",
  "file-ignored",
  "suppressed-message",
  "similarities",
  "too-many-ancestors",
  "too-few-public-methods",
  "too-many-public-methods",
  "too-many-return-statements",
  "too-many-branches",
  "too-many-arguments",
  "too-many-locals",
  "too-many-statements",
  "too-many-instance-attributes",
  "too-many-lines",
  "broad-except",
  "logging-fstring-interpolation",
  "logging-format-interpolation",
  "consider-alternative-union-syntax",
  "deprecated-typing-alias",
  "invalid-name"
]
max-line-length = 120
reports = false

[tool.pylint.dunder]
good-dunder-names = ["__pretty_repr__", "__pretty_str__"]

[tool.pylint.parameter_documentation]
accept-no-param-doc = true
accept-no-raise-doc = false
accept-no-return-doc = false
accept-no-yields-doc = false

# Possible choices: ['sphinx', 'epytext', 'google', 'numpy', 'default']
default-docstring-type = "default"
