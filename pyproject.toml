[build-system]
# Minimum requirements for the build system to execute.
# PEP 508 specifications for PEP 518.
requires = [
  "setuptools>=45",  # PSF/ZPL
  "setuptools_scm[toml]>=6.2",
]
build-backend="setuptools.build_meta"

[project]
name = "SQLAlchemy-JSONField"
description = "SQLALchemy JSONField implementation for storing dicts at SQL"
readme = "README.rst"
urls={"Bug Tracker" = "https://github.com/penguinolog/sqlalchemy_jsonfield/issues"}
requires-python = ">=3.7.0"
keywords = ["sql", "sqlalchemy", "json", "jsonfield", "development"]
license = {text = "Apache License, Version 2.0"}
authors=[{name="Alexey Stepanov", email="penguinolog@gmail.com"}]
dynamic = ["version", "classifiers", "dependencies"]

[tool.setuptools.package-data]
sqlalchemy_jsonfield=[
  "py.typed",
  "*.pyi",
  "*/*.pyi"
]

[tool.setuptools.packages.find]
exclude = [
  "doc",
  "test",
  ".*"
]
include = ["sqlalchemy_jsonfield"]
namespaces = false

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}
classifiers = {file = ["classifiers.txt"]}

[tool.distutils.bdist_wheel]
universal = 0

[tool.black]
line-length = 120
safe = true
target-version = ["py37", "py38"]

[tool.isort]
line_length = 120
multi_line_output = 3
force_single_line = true

import_heading_stdlib = "Standard Library"
import_heading_thirdparty = "External Dependencies"
import_heading_firstparty = "Package Implementation"
import_heading_localfolder = "Local Implementation"

[tool.doc8]
max-line-length = 150

[tool.pydocstyle]
ignore = [
  "D401",
  "D202",
  "D203",
  "D213"
]
# First line should be in imperative mood; try rephrasing
# No blank lines allowed after function docstring
# 1 blank line required before class docstring
# Multi-line docstring summary should start at the second line
match = "(?!_version|test_)*.py"

[tool.mypy]
strict = true
warn_unused_configs = true
warn_redundant_casts = true
show_error_context = true
show_column_numbers = true
show_error_codes = true
pretty = true

[[tool.mypy.overrides]]
module = [
  "sqlalchemy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-vvv -s -p no:django -p no:ipdb"
testpaths = ["test"]
mock_use_standalone_module = false
junit_family = "xunit2"

[tool.coverage.run]
omit = ["test/*"]
branch = true

[tool.coverage.report]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",

  # Don't complain about missing debug-only code:
  "def __repr__",

  # Don't complain if tests don't hit defensive assertion code:
  "raise NotImplementedError",

  # Exclude methods marked as abstract
  "@abstractmethod",

  # Exclude import statements
  "^from\b",
  "^import\b",

  # Exclude variable declarations that are executed when file is loaded
  "^[a-zA-Z_]+\b\\s=",

  # Code for static analysis is never covered:
  "if typing.TYPE_CHECKING:",

  # Fallback code with no installed deps is almost impossible to cover properly
  "except ImportError:",

  # Don't complain if non-runnable code isn't run:
  "if __name__ == .__main__.:",

  # OS Specific
  "if platform.system()",
]

[tool.coverage.json]
pretty_print = true

[tool.setuptools_scm]
write_to = "sqlalchemy_jsonfield/_version.py"
